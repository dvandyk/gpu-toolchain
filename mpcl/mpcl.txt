# MPCL Specification #

## Grammar ##

    id
        <-  [a-zA-Z] [a-zA-Z0-9_]*


    number
        <-  float
        /   int
    int
        <-  [+-]? [0-9]+
    float
        <-  [+-]? [0-9]+ '.' [0-9]+ ( [eE] [+-]? [0-9]+ )?


    comment
        <-  '/' '*' (! '*' '/')* '*' '/'


    trans-unit
        <-  trans-elem+
    trans-elem
        <-  func


    func
        <-  type id func-param-list ( ';' / stmt-block )
    func-param-list
        <-  '(' func-param ( ',' func-param )* ')
    func-param
        <-  "void"
        /   func-param-mod? type id
    func-param-mod
        <-  "in"
        /   "out"
        /   "global"
        /   "const"


    type
        <-  spec-type
        /   id
    spec-type
        <-  id '<' id '>'


    exp
        <-  exp-sum
    exp-sum
        <-  exp-prod ( [+-] exp-prod )*
    exp-prod
        <-  exp-power ( [*/] exp-power )*
    exp-power
        <-  exp-elem '^' exp-elem
    exp-elemt
        <-  exp-call
        /   exp-paren
        /   exp-list
        /   exp-value
        /   exp-var
    exp-call
        <-  id '(' exp ( ',' exp )* ')'
    exp-paren
        <-  '(' exp ')'
    exp-list
        <-  '{' exp-list-elem ( ',' exp-list-elem )* '}'
    exp-list-elem
        <-  exp 'x' int
        /   exp
    exp-value
        <-  number
    exp-var
        <-  id

    stmt-block
        <-  '{' stmt+ '}'
    stmt
        <-  stmt-block
        /   stmt-foreach
        /   stmt-return
        /   stmt-decl
        /   stmt-assign

    stmt-decl
        <-  type stmt-decl-list ';'
    stmt-decl-list
        <-  stmt-decl-elem ( ',' stmt-decl-elem )*
    stmt-decl-elem
        <-  id '=' exp
        /   id

    stmt-assign
        <-  id '=' exp ';'


    stmt-foreach
        <-  "foreach" stmt-foreach-list stmt-block
    stmt-foreach-list
        <-  '(' stmt-foreach-elem ( ',' stmt-foreach-elem )* ')'
    stmt-foreach-elem
        <-  id "in" stmt-foreach-range
    stmt-foreach-range
        <-  exp ".." exp
        /   exp

    stmt-return
        <-  "return" exp ';'

<!-- vim: set tw=100 ft=text spell spelllang=en sw=4 sts=4 et : -->

